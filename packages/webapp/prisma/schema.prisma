generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String @id @default(uuid())
  username       String @unique
  imageUrl       String @db.Text
  externalUserId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  following Follow[] @relation(name: "Following")
  followers Follow[] @relation(name: "FollowedBy")

  blocking  Block[] @relation(name: "Blocking")
  blockedBy Block[] @relation(name: "Blocked")

  stream Stream?

  @@index([externalUserId])
  @@index([username])
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive               Boolean @default(false)
  isChatEnabled        Boolean @default(true)
  isChatDelayed        Boolean @default(false)
  isChartFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
  @@index([blockerId])
}
